#!/bin/bash
# Assume that / is an arch install.
# Assume that $1 is destination with proc,sys,dev,dev/pts,run already mounted
set -e -u
umask 022
selfdir=$(dirname "$(readlink -f "$0")")
MYUSER=arch

mounts='/etc/resolv.conf /etc/localtime'
# For mirrorlist and gnupg dir
mounts+=' /etc/pacman.d'
cleanup() {
    #bash -i || :
    for pidfile in /run/haveged.pid /run/dhclient.pid; do
        pkill -F $pidfile || :
        rm -f $pidfile
    done
    rm -f /run/dhclient-script
    umount $mounts || :
}
# Ensure that no services are running when done
trap cleanup EXIT
#set -x # DEBUG

cd $1
# Create etc and other necessary skeleton
mkdir -p etc/pacman.d

# Start services for hwrng and networking
haveged -p /run/haveged.pid -w 1024
# dhclient-script writes /etc/resolv.conf
sed "s,/etc/resolv\.conf,.&,g" /usr/bin/dhclient-script > /run/dhclient-script
chmod 755 /run/dhclient-script
touch etc/resolv.conf
dhclient -sf /run/dhclient-script -pf /run/dhclient.pid eth0

# Time
ln -sf /usr/share/zoneinfo/Europe/Amsterdam etc/localtime

# Networking.
echo builder > etc/hostname
#ip link set eth0 up
#ip addr add 10.0.2.15/24 dev eth0
#ip route add default via 10.0.2.1
#echo > etc/resolv.conf nameserver 10.0.2.3

# Pacman
echo > etc/pacman.d/mirrorlist \
    "Server = http://10.0.2.2:8001/\$repo/os/\$arch"
sed -r /etc/pacman.conf > etc/pacman.conf \
    -e "s/^#(Color|TotalDownload)/\1/"

for file in $mounts; do
    mount --bind .$file $file
done

# Avoid warnings when package signatures are outdated
pacman-key --gpgdir etc/pacman.d/gnupg --init &&
pacman-key --gpgdir etc/pacman.d/gnupg --populate archlinux
#pacman-key --gpgdir etc/pacman.d/gnupg --refresh-keys || :

# Base installation (-M avoid mirrorlist copy -G avoid gpg copy)
pacstrap -C etc/pacman.conf -M . base base-devel
# Restore files
for file in etc/resolv.conf etc/pacman.{conf,d/mirrorlist}; do
    [ ! -e $file.pacorig ] || mv -f $file.pacorig $file
done

# SSH (disable by default since its dependencies may affect packages)
if false; then
    cat >> etc/ssh/sshd_config <<EOF
UseDNS no
PasswordAuthentication no
AllowUsers root $MYUSER
EOF
    for svc in sshdgenkeys.service sshd.service; do
        ln -sv /usr/lib/systemd/system/$svc \
            etc/systemd/system/multi-user.target.wants
    done
fi

# Personalization
useradd -R $PWD -m -G wheel -s /bin/bash -p '' $MYUSER
wrfile() {
    tee='tee'; if [[ $1 == -a ]]; then tee='tee -a'; shift; fi
    if [[ $1 == */* ]]; then
        mkdir -p {root,home/$MYUSER/}/$(dirname "$1")
        chown --reference=home home/$MYUSER/$(dirname "$1")
    fi
    $tee {root,home/$MYUSER/}/$1 >/dev/null
    chown --reference=home/$MYUSER home/$MYUSER/$1
}
echo HISTCONTROL=ignoredups:ignorespace | wrfile -a .bashrc
echo -e 'syntax on\nset number bg=dark smartindent hlsearch' | wrfile .vimrc
wget -O - https://lekensteyn.nl/files/screenrc | wrfile .screenrc
wget -O - https://lekensteyn.nl/sshkeys.txt | wrfile .ssh/authorized_keys

rm -rf var/cache/pacman/pkg

# Kick the builder
install $selfdir/build.sh home/$MYUSER/
chown --reference=home/$MYUSER home/$MYUSER/build.sh
cat > etc/systemd/system/shared.mount <<EOF
[Unit]
Description=Shared folder using 9p

[Mount]
What=shared
Where=/shared
Type=9p
EOF

cat > etc/systemd/system/builder.service <<EOF
[Unit]
Description=Invoke script from builder
Requires=shared.mount

[Service]
Type=oneshot
User=$MYUSER
ExecStart=/home/$MYUSER/build.sh
EOF
ln -s ../builder.service etc/systemd/system/multi-user.target.wants/
