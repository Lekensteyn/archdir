#!/bin/bash
# Assume that / is an arch install.
# Assume that $1 is destination with proc,sys,dev,dev/pts,run already mounted
set -e -u
umask 022


selfdir=$(dirname "$(readlink -f "$0")")
MYUID=$(grep -m1 -Po '\bapp\.uid=\K1\d+' /proc/cmdline || echo 1000)
MYGID=$(grep -m1 -Po '\bapp\.gid=\K1\d+' /proc/cmdline || echo 1000)
MYUSER=arch
repos='core extra community'
repos+=' testing community-testing'
#repos+=' multilib multilib-testing'

mounts='/etc/resolv.conf /etc/localtime'
# For mirrorlist and gnupg dir
mounts+=' /etc/pacman.d'
cleanup() {
    #bash -i || :
    for pidfile in /run/dhclient.pid; do
        pkill -F $pidfile || :
        rm -f $pidfile
    done
    rm -f /run/dhclient-script
    # Kill pacman's gpg agent.
    killall -q gpg-agent dirmngr || :
    if ! umount $mounts; then
        echo 'Failed to unmount, pending processes:'
        ps aux | awk '$11 !~ /^\[/'
    fi
}
# Ensure that no services are running when done
trap cleanup EXIT
#set -x # DEBUG

cd $1
# Create etc and other necessary skeleton
mkdir -p etc/pacman.d

# Noticing that pacman-key --init is hanging even with a hwrng device? It
# happens because of http://www.spinics.net/lists/linux-crypto/msg20996.html
# (Fixed by 3371f3da08 "random: initialize the non-blocking pool via
# add_hwgenerator_randomness()"). Still present in 4.6.6, 4.7, fixed in 4.8-rc1
#
# Workaround: Drain entropy from the blocking pool. The first time there is
# enough entropy, so nothing is transferred from the input pool (see
# xfer_secondary_pool). The second time it will perform the transfer, notice
# there is enough entropy and initialize the nonblocking pool which lets
# getrandom() continue.  NB. 512 is the maximum effective size (SEC_XFER_SIZE).
dd if=/dev/random of=/dev/null bs=512 count=1 status=none
dd if=/dev/random of=/dev/null bs=512 count=1 status=none

# dhclient-script writes /etc/resolv.conf
sed "s,/etc/resolv\.conf,.&,g" /usr/bin/dhclient-script > /run/dhclient-script
chmod 755 /run/dhclient-script
touch etc/resolv.conf
dhclient -sf /run/dhclient-script -pf /run/dhclient.pid eth0

# Time
ln -sf /usr/share/zoneinfo/Europe/Amsterdam etc/localtime

# Networking.
echo builder > etc/hostname
#ip link set eth0 up
#ip addr add 10.0.2.15/24 dev eth0
#ip route add default via 10.0.2.1
#echo > etc/resolv.conf nameserver 10.0.2.3

# Pacman (first try local mirror)
gwaddr=$(ip route | awk '/default via/{print $3}')
mirror=http://${gwaddr}:8001
wget -q -t1 -T3 --spider $mirror/core/os/x86_64/core.db || mirror=
echo "Local pacman packages mirror: ${mirror:-(none)}"
printf 'Server = %s/$repo/os/$arch\n' > etc/pacman.d/mirrorlist \
    $mirror \
    http://ftp.nluug.nl/os/Linux/distr/archlinux/ \
    http://mirror.nl.leaseweb.net/archlinux \
    http://arch.apt-get.eu
# the magic $repos expression uncomments some repos (if not enabled)
sed -r /etc/pacman.conf > etc/pacman.conf \
    -e "/^#\[(${repos// /|})\]/{:s;s/^#//;n;/^#[A-Z]/bs}" \
    -e "s/^#(Color|TotalDownload)/\1/"

for file in $mounts; do
    mount --bind .$file $file
done

# Avoid warnings when package signatures are outdated
pacman-key --gpgdir etc/pacman.d/gnupg --init &&
pacman-key --gpgdir etc/pacman.d/gnupg --populate archlinux
#pacman-key --gpgdir etc/pacman.d/gnupg --refresh-keys || :

# Workaround for very slow gnupg installation (which takes 128s)
mkdir -p usr/local/sbin
ln -s /bin/true usr/local/sbin/dirmngr

# Base installation (-M avoid mirrorlist)
pacstrap -C etc/pacman.conf -M . base base-devel
# Restore files
for file in etc/resolv.conf etc/pacman.{conf,d/mirrorlist}; do
    [ ! -e $file.pacorig ] || mv -f $file.pacorig $file
done
rm usr/local/sbin/dirmngr
pacman() {
    command pacman -r . --config etc/pacman.conf \
        --cachedir=var/cache/pacman/pkg \
        --noconfirm --noprogressbar "$@"
}
mkdir -p etc/systemd/system/multi-user.target.wants

# SSH (disable by default since its dependencies may affect packages)
if false; then
    pacman -S openssh
    cat >> etc/ssh/sshd_config <<EOF
UseDNS no
PasswordAuthentication no
AllowUsers root $MYUSER
EOF
    for svc in sshdgenkeys.service sshd.service; do
        ln -sv /usr/lib/systemd/system/$svc \
            etc/systemd/system/multi-user.target.wants
    done
    #pacman -S bash-completion htop screen vim
fi

echo '%wheel ALL=(ALL) NOPASSWD: ALL' >> etc/sudoers

# Personalization
awk -F: "\$3 == $MYGID { found = 1 } END { exit(!found) }" etc/group ||
chroot . groupadd -g $MYGID $MYUSER
chroot . useradd -m -u $MYUID -g $MYGID -G wheel -s /bin/bash -p '' $MYUSER
wrfile() {
    tee='tee'; if [[ $1 == -a ]]; then tee='tee -a'; shift; fi
    if [[ $1 == */* ]]; then
        mkdir -p {root,home/$MYUSER/}/$(dirname "$1")
        chown --reference=home home/$MYUSER/$(dirname "$1")
    fi
    $tee {root,home/$MYUSER/}/$1 >/dev/null
    chown --reference=home/$MYUSER home/$MYUSER/$1
}
echo HISTCONTROL=ignoredups:ignorespace | wrfile -a .bashrc
echo -e 'syntax on\nset number bg=dark smartindent hlsearch' | wrfile .vimrc
wget -O - https://lekensteyn.nl/files/screenrc | wrfile .screenrc
wget -O - https://lekensteyn.nl/sshkeys.txt | wrfile .ssh/authorized_keys

rm -rf var/cache/pacman/pkg

# Kick the builder
install $selfdir/build.sh home/$MYUSER/
chown --reference=home/$MYUSER home/$MYUSER/build.sh
cat > etc/systemd/system/shared.mount <<EOF
[Unit]
Description=Shared folder using 9p

[Mount]
What=shared
Where=/shared
Type=9p
EOF

cat > etc/systemd/system/builder.service <<EOF
[Unit]
Description=Invoke script from builder
Requires=shared.mount
After=shared.mount

[Service]
Type=oneshot
User=$MYUSER
ExecStart=/home/$MYUSER/build.sh
EOF
ln -s ../builder.service etc/systemd/system/multi-user.target.wants/
